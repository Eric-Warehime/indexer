// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
