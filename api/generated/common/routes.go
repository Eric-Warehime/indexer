// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
