// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
