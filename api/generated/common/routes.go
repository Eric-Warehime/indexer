// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9f4/cNrLgVyH6HhA715pxnN3FxcDiwWvHWGOdrOFxssB5cghbqu5mRiK1JDU9ndx8",
	"9wdWkRIlUerumbGdAPuXPS3+KLKKVcX6xd8WuapqJUFas3j226LmmldgQeNfPM9VI20mCvdXASbXorZC",
	"ycWz8I0Zq4XcLJYL4X6tud0ulgvJK+jauP7LhYZ/N0JDsXhmdQPLhcm3UHE3sN3XrrUf6fZ2ueBFocGY",
	"8az/lOWeCZmXTQHMai4Nz90nw3bCbpndCsN8ZyYkUxKYWjO77TVmawFlYc4C0P9uQO8jqP3k0yAuFzcZ",
	"LzdKc1lka6UrbhfPFs99v9uDn/0MmVYljNf4QlUrISGsCNoFtchhVrEC1thoyy1z0Ll1hoZWMQNc51u2",
	"VvrAMgmIeK0gm2rx7MPCgCxAI+ZyENf437UG+BUyy/UG7OKnZQp3aws6s6JKLO21x5wG05TWMGyLa9yI",
	"a5DM9Tpj3zXGshUwLtm7Vy/Y119//Q2jbbRQeIKbXFU3e7ymFgsFtxA+H4PUd69e4PwXfoHHtuJ1XYqc",
	"u3Unj8/z7jt7/XJqMf1BEgQppIUNaNp4YyB9Vp+7LzPThI6HJmjsNnNkM41Yf+INy5Vci02joXDU2Big",
	"s2lqkIWQG3YF+0kUttN8vBO4grXScCSVUuMHJdN4/s9Kp3mjNch8n200cDw6Wy7HW/LOb4XZqqYs2JZf",
	"47p5hTLA92WuL+H5mpeN2yKRa/W83CjDuN/BAta8KS0LE7NGlo5nudE8HTJhWK3VtSigWDo2vtuKfMty",
	"bmgIbMd2oizd9jcGiqltTq/uAJm3nRxcd9oPXNDvdzO6dR3YCbjBg5DlpTKQWXVAVgXxw2XBYunSCS5z",
	"muRi77fAcHL3gaQ27p10BF2We2YRrwXjhnEW5NSSiTXbq4btEDmluML+fjVu1yrmNg2R0xOqTjOZ2r7R",
	"ZiQ2b6VUCVzi5nktJeNlOcMvy5IJC5XxSo1jjThB0bLSJSugBFxkJw7wV2O12uPiDbh2qrZQZKqxnii2",
	"qnQDmiVihIalz5HwKVXOS2O5hUmFKF7JgUWXohJ2vNzv+I2omorJplqBdggPvNUqpsE2WiKyNbAccbZC",
	"rUe47rxkNd+AYeBYryBtDudxR0MqyzTwfDtN9wTTAVKv+E2mVSOLI5QWy5SOhYKpIRdrAQVrR5mCpZvm",
	"EDxCngZPp0pF4IRBJsFpZzkAjoSbBFrd8XRfEEERVs/YD5474VerrkC2TIyt9vip1nAtVGPaThMw4tTz",
	"1wWpLGS1hrW4GQN54bfDcQhq41lo5eV3rqTlQkLhuCsCrSwQt5mEKZrwVCVlxQ385U9TErr7quEK9kmm",
	"OyQAWk57K9q6L9R3fhXtDAcO9ZF0uFZD+pulvaPoDhtlxDYSUth99UwlfQPt9T/iDhrPTfef7F53URoj",
	"iLeprRjM9PHUXiM2GY04OiVi897J4rUoUU7/4g5HwGxjnFzq4zZIbiM2kttGw7NL+aX7i2XswnJZcF24",
	"Xyr66bumtOJCbNxPJf30Rm1EfiE2U5sSYE3eTbFbRf+48dJ3UXvTLjc1RficmqHmruEV7DW4OXi+xn9u",
	"1khIfK1/XdAtb2rm1EXsjVJXTR3vZN4zTKz27PXLKSrBIecYITINUytpAMn1OWkQ7/xv7ifH60AiK4+U",
	"gPNfjEIltxu71qoGbQXEhiD33//SsF48W/yv885wdE7dzLmfsLtX2CkZRieXW8+7iGd5bkZaQFU3lmR6",
	"ii205/hDC9twzg4tavUL5JY2qA/GI6hqu3/sAPawm4fbLfw/Kncn7JsHmWvN9x95H0mqZyidxyP/4HRQ",
	"x9JrvhESF75kuy1IVvErxw64VHYLmjlcgLFBvhPfI5HfWrC8kuA17bNF6sQkcGrujdQOa2/U5kFwe8Cu",
	"c3n5gde1KG4uL3/q6dlCFnCTRsNHxXGpNlnBLT+eGHt79tJ1TdDl75d0hjazhyKghyWeE7DwadnpQ23X",
	"Ax82cxf6/Q9DTZyK+zNVY8D+jZdc5vAQWF75oY7G8HdCCgTi72Tg+A+aA5rbrXwIFD/EAXbjHDyw2OjT",
	"6ow45UNsknmoXTqBwYX9+g/Nt7i8N8X/rVT51Z1wOYcqHPXAzN9qrfQDUFFQ8garXi4qMIZvIG06i3cy",
	"NDxm6wLAiHZwS0ADw9+Bl3b7YgsfYTOjsQ9s6fvuSv0AG/tRj1V0+z+0/mhVB7S2/rAnnoRoGvN7373f",
	"D1PqbfnxvLyH0yFHPx7H5jQk3wYrUmwmSoQN+BAfIcmW6K6x3DLuveBk3b2Ul/IlrIVEZ82zS+n40PmK",
	"G5Gb88aA9pri2UaxZ8wP6W6Vl3KxHArCKVMrOjo9NHWzKkXOrmCfwgJ5YNP38nKj3K3cKsvLyBUV+WW9",
	"A6AzKY1JjibIHGWoxmY+niHTsOO6SIBuWvcDjkwO4rlZl8yPTV4SHy/hx08fA17XJkNHXoaevCmzRDkw",
	"Shjy/jGHMmas0sEHIkyABvH7vbLer8B3jOiLNQYM+7ni9Qch7U8su2yePPka2PO6fuPGvHBw/Ox9Au48",
	"7WvyrJ5sggiDpTQeXDjiM4Mbq3mGnsLk8i3wGrG/BWaaCp3OZcmwW89QU2u10bzyTsd2AWE/phFAcBwn",
	"y6IV4uIuqFeI4kkvAT8hCrEN20LpvWn3wFd0j7ozug7cxWbihi4vP2BIUMBMG0Kw4UKaIBWM2Eh3CHy0",
	"xQpY7rQAKM7Y6zVDrrbsdfcxf55jtqxDGAqQYO/dGtE3xnIuMXCiLjCQQEjG5X5olDdgbXCBvIMr2L+P",
	"XGsnumi8H54fEIlF44ZrxWKHYbbjhlUK3TM5SFvuvWs/QZppYBohLfkYcwqfyBz9TjENPDVRBIc7ODEL",
	"8WMMCTEKaOB1zTalWnlO05Los5ZGQ59ppvLWAWAegKEkL05hG2bOXs11YiPoIE5swR0W6sa71zGcXd6d",
	"SW4ttMGwEeBeRvD4iNyB8nxMyxiUf20BtTKlMbajT1ImHOkU0bcua4qe8LaQRDBKkLzMN2FBywqhCTH+",
	"3m/b7xVgrJvaGbbiTrtUPkyLIp4iGdK4e1RaVNRcW5GL+jgrMAHyttfHDXJI60jqGWo9VCdG0j4JMjXO",
	"3JqTZwPcF3c4GkOhWG6NgQeHmUiRxxWcMXSd+w1blRid1UaOEvlxjWFjYdkUSTkFWvrIgpaduhfA6O9I",
	"rFduuQkRZBhoF7jXURrYxLlC4sGz5Y50dLBilVq4eUu45lP7P+21fy0LR3Jg+tF0rU8+SLwhZ1q2wS8U",
	"IR9898FhH7z07l93EJuyZGLNGnkl1c7p7af44ZcLp5Q2aSQpiUqpYwcb2g5qHMjHA/yFidDmoPrnel0K",
	"CSxjot0Di3tAMZEqFxQY2LEOPwe4O8uXzNGgG+DoEVLEHYFdK1XSwOx7FZ9YuTkFSAkC2R8PYyMfjP6G",
	"9OUTdc/D9wAMqAyswem/o1BAugw86unxXoc0j6cuCWnTBsE0IVPHkJAsfRRrk93ESV13Ztp5zSa1DQYX",
	"TXpGN++UaD9m6jut/B4ADA2jbTiRvxQfvLz2BedYzHT8dtmFb9HZniTBAR0k8TOxc2ObRhum8XYoRZOW",
	"i14rRk1W/iYeKXIpDulIPFfSgDQNBmBblavybGSyMFAC6kBZT7BnV7BP33YA+d1F6BaZM9gjsXaXj8eR",
	"kqNhI4wF7U1ZCGEbVdcFDe5xo2tuLWg30f979N/PPjzP/i/Pfn2SffO/z3/67U+3j78c/fj09q9//f/9",
	"n76+/evj//6vFIu5VhYyVASza15OxD64Rq8MXlJfoc6YlH69rWIUIS8mTHw47RXss0KUTRrbft5/vHTT",
	"ft/adUyzuoI96jjA8y1bcZtvUQnqTe/azExd8oMLfkMLfsMfbL3H0ZJr6ibWStnBHH8QqhpwrLnDlCDA",
	"FHGMsTa5pTPsBaXeSyjJozKduYUszklmy8/mrJmjw1SEsee0/wiKad5OIyXX0o82mV4FhibhHUbYKCHC",
	"jFZ07EUSrezETaNpdry9KX/0C2O8uvjS6EdJ3xr9x3ssbzz8sct7qFgyxN4p9hDSN0YEhgfHD3aAuCIT",
	"7Tis2OmLwcxMpyXSeylrSMZrGx+jLm/lOMQEAe7TaFTTauuDaT4aAUJCq6a1p2iRrbWq8OSNVbuIOMXE",
	"9bJHgp3IGczq84DH9OKYJ+anHfRUAS//AfsfXVvEqutNGUdCHntkuts29mRCWvUAqLmfzT1F+X7Eg5RP",
	"8ZFTZI8Zo2T47PnQTjwBpdqkL8/lBvUOtemSL2JyWIG7QsEN5I3tjFsDu11rWvy02uTQRpmOl4/co5S+",
	"PK8/4Eb5sQ6g7m3LJz8m5nhda3XNy8w7laZ4vFbXnsdj8+CD+sTqWPqYvf/2+Zu3Hnx0XwDXdLebXRW2",
	"q/8wq3J6idITLDYkp265be/jQ/nvnUrC9BxRO8xpHNw3nabliYsYdOdkjE6vd0ytg15+opvJ+0NpiTN+",
	"Uahbt2hnNCavaN8Tyq+5KIO1NkCbFiq0uM4GdbJciQe4t0c1skZkDyopRqc7fToOcKJ4hpnkxYpSaA1T",
	"Pkmxvefi5RZNv0igFd87uiFL3ZglyabK3KHLTCnytD1frowjCUlecteYYeOJa7Ib0cni9FiNiMZyzcwR",
	"pqsBkNEcyc0MUaZTe7dSPoynkeLfDTBRgLTuk8azODie7jSGBPw7X4ESvjRK1P+ElyCc8JTrj08ov9fi",
	"2lHucgly95rxpB5rfj0t7u5z/+ksrWP9D4GYv/zEAQ8jcF+2dsZARa31msueb/GEuKl4xpGWMRPz5A+f",
	"ZxWNFD5u5A7YOVxfJly0fOGBiWynKVH7fFrMuvFPELCdPEXAYklKtRB4aVRimEbuuLShooLfLd/bABmF",
	"Xa+d0sZiCY6kM+akm2JcqeFe90OTrbX6FdL20bWjg914+mhi6p0e/Oh73oAzTNz3WsxME8ohYmxrXdwX",
	"pNY+cG+ghtpB63TpyisF2o/RNclgpq4osZuoH104IcSQ10QxLHgZD25MLom5vMCCTb3bYZpFxWGn5zR+",
	"x6I8zGMbDt+teH6Vvik4mJ53kVs9h6tVLHRu65n08XXGoiCwtq0vDVKDroTti7zuoN5V6/+jsaNcVLxM",
	"q/8F7v77nkJZiI2g0iyNgaiwiB+I1UpIS1RUCFOXfE+xcd3WvF6zJ8uIv3lsFOJaGLEqAVt8RS1W3KBi",
	"1pnpQhe3PJB2a7D50yOabxtZaCjs1te8MYq1NzO0crVxDyuwOwDJnmC7r75hjzDiw4hreOx20avbi2df",
	"fYNeUfrjSUqg+SJOc+y3QP4b2H+ajjHkhcZwqoIfNc2PqQzfNKefOU3U9ZizhC29cDh8liou+QbSIZ7V",
	"AZioL2ITPXaDfZEFlY1CxZIJm54fLHf8Kdtys03rQgQGy1VVCYvBXFYxoypHT11hC5o0DEc1qIjXt3CF",
	"jxheU7O0DfPT2tOoRkRq1RgE9T2voL+tS8YNM42DubMNeoZ4xnxtl4IpWe4j6y3ujZsLVRWnWKONfc1q",
	"LaRF60Bj19n/YfmWa5479nc2BW62+sufxiD/DQvgMJC5cvPL0wD/5PuuwYC+Tm+9niD7oHT5vuyRVDKr",
	"HEcpHnsu3z+VkxE/6Uj3wNGHiQ7zQx+reblRsklya3rkxiNOfS/CkzMD3pMU2/WcRI8nr+yTU2aj0+TB",
	"G4ehH9698VpGpTT0jdyrkHzS01c0WC3gGoPu00hyY94TF7o8Cgv3gf7zhjh0N4BWLQtnOXURoATS8Xa4",
	"n+NlT5kTlLq6AqiF3JyvXB9S1WnUoZK+AQlGmGkButk6ynGfnciLrD84NFtBqeTGfHpKD4BP+NA3gDzp",
	"9ctDUI8GDiXqMmw6vTGunZvibShpR0O79p9DIrUh0QdTk9/5ttMRzE6MUXrOC59MQxFOfW8zrXfH0ScA",
	"siC1Dtnflgs5EdYMUEzEyAHOeKG0FRRnA/AZIt6sqMBYXtVpMYtGcjqJeKodoG0XdxsxkCtZGGaEzIFB",
	"rcz2UA7wRO7ajcTJSmFI5MTF5nKlqeoX6hRWDfIzj80emc1E7cOYaaXsFKCofMQpxEpZxhu7BWnbEGjA",
	"+qvDlVB+Cd44SKAQy2LfOR4f6qXxstwvmbBf0DgY+4byuAJ9VQKzGoDttsoAK4FfQ1dsF0f7wrD3N6Iw",
	"WEq3hBuRq43m9VbkTOkC9Bl75T3peAuiTn6+J2fMZ9b5EO73NxKXVyigK1K8TlpmiMRv/TbxipckQIc/",
	"Y4VaA+U1mDP2fqcICNNlIxunhPR6rBpLWTmFWK8BzykuBy9P2K/7EMGEZYOxeHE7rF/TZzhtNzJD/Xji",
	"EmnJUnEjX1Aj5vNF+s6wwdGo6MYaCKqEYgN6SSZV3HZRQZd97nQ3pW1nsFkDpVE4ziak1apocqCc54se",
	"PUZgiRFIbR3UKJoBaShUbe7gDMaWwFPdhRwV3CekZknVXyHiDq5BsxWAjAZ6REwngstYrjEMBKNC/FKh",
	"eJxmzk290byA43y4yAR/oB5trm4Y4VqdNsCPrv1QberpJj2Jn5bSUXy6kzIxL0/xsknV691UftErKkat",
	"oaQUD6xjjG2XI8VqDZAZIdPWzzUA8nae51A7co7fqQBwjIqUWGQVmCwbZKvDsLTiGij5ZEYZyHJe5k1J",
	"sa8zkn6X81L3XUYlrK1yBBaXL+9MgsLNtcLYWyoATPNpxwCjHlgl5Br03reg21Oot+sOhx7EOYyTvLIS",
	"riF9pwFOuV5/VztWcblvceGm6MBY0nnBo9JCTroKOtEJ2z/4i10EPh0mT3XzQDpUTGxuEeO5Bi1UIXIm",
	"5C/gT3PLlgLFUOFuJa2QDdY719DBTXKCYdraMDVtTAF6qi6A+9APnJew62G7iPS5fpi5sfwKCOyQYOdF",
	"47E41WBE0UyYMjXP+5CdRoz+8L7jFs51i1rzQHQ54FDtIZ87dENaHpDNAFvjXZrkUz3mewyz4m1OC/OM",
	"OhF56wuOhJYTdx9lVbA4hYT7duxr0KYf0xnZAOHmwNiuRW98KsOiFdkXTp8lCyE7ZnK+PbHjjuaC8kVp",
	"qdgffMxIYgcnatS0AJidsPk2m0hjcW2phYPh3fCmNZ6SVAg8hbBeQ26PgQHzIah+/SQU9NlB8RJ4gZmS",
	"XWoLJbUMQXn0vWJuaBPpNdII1EI7tQZHeXxCIcqWQg4R/4/qSNq/Vvg/dJEecQyCIuNxnzZ7UhtPPF1a",
	"Lmd7MLgrbYRudEZqZXiZ9vCESQso+X5uSmzQn7RVbIOTi2QOpro7gUIRwelQ62hqf87mJndNhgtuj+f4",
	"VMT1sYeY/PaalxMZN++g1mCcwsg4e//t8zfelzeVd5NPpolx65ONLWeTpQtul3jhSbMICo3D7/5dl6Qd",
	"cyocjqLh3OdR77sFGUyV+Io2NERXjgH6Rwj+ZzUX3lHdJR2Nd9Ynoo1TA49JIOgQPFyET+/CQVIriQu/",
	"jaMh2BY/U0kYFgqgj4GfrI9XrLI2tjX1AsJy4evbxUW9Dga0C5NVYqOR6aRHna7LF1njEgmCJOwSb/F4",
	"xjItDQf73lv4AOIOvO4qFWZO4WhUkzWBKCOquiQnqx/KyddevvdJSXRd3NvHD6N86Aitjx5jBXd28D18",
	"aNVdYTmc0D4fRvVP+UJVdQnT8qAm9zg9SUWSEytpRI8PBVOLyvNGdza4YaDUj7wU9CqGwWoaUqkay2fU",
	"Vkj3H8xHU42l/wPX7j9Udqr/P6KqqMiGG2qBeBFy4QtIqcaGcPOFE9kFXRh831QRjjvmtB5lPB7LmgRH",
	"nA1078l4xExJJu8ueN+dSvyywS9xjgAjQDBYw4S/DCvAgq6c7rpVO1Y1+RbD4vkGQpQ8RqCg4XQwUW/0",
	"EEzXz/bwzkdT85wGogClkusNaOZjhtoaQyHwqOJi8NzQMCwAr7I8JX8Pxe6Pn9lCbSmK4E+kCAQwrmB/",
	"TsoA/n4HxjGdCDABGKYDfESQ7pVVECemHKDXq54eRTXkerk8LfgPqE85+PxZO1GfGqfcHLs8XAceh8bA",
	"eJ3HO5vivU2wim5tx14Gxps7rcPb1TE6fLrikuuOlwjaECzQxhBU9vNXPzMNa//K4Zdf4gRffrn0TX9+",
	"2v/sCO/LL9M3sE91faA98mP4eZMU069SPHwDEhmawVo2/pHGXFWVkmhoKsuBl08WDOOeDL7aKBnIayhV",
	"DcnWtMER0jGXR8OmKTl5t4SUoHudjglcNmIjobA3kiIiLvDP9zcy1TYW9dg62o5UFdvoBZK7lXcelCuk",
	"AHJ6UfeuI3Yh3t2I4THnu4/4iuJQ2xFxqDXo+4z53o9xROXQjdSUu0iB2CKEJaGSRhgePMwWQpVCRdEQ",
	"cN16cOHfDS+9h1qiP/g9Bh3nVyCpWGj7lrFVDKRptHcIO1hxPAeKH0bFAt50Te5aNjSbq3en0Vje2uF9",
	"GBoG0FNXp3oUDjlqvoyVay/kJpvJK8oxscg3DImjaOGarQrpBndEqCsojiwYEPvDMHku9J/JLqK6Ut0z",
	"QOm0suhhSDkur8EevX75mGHtnKkqJtE7f4eXHZe2Og4iim0cwTJMIzwFijXAlBNyELfB1jBhzz5UAmp9",
	"3VV/wlZDw/FBKI8MRPs7N1jOyTf3DvPfafRZD0j/yN94qDjt+eQSQcvFRqsmHay0oVT8QRglXgxQ6aIQ",
	"GrPlf/7q6fnTP/+FFWIDxp6xf2GuEAnfcRXDPjaZ6Koj9urDMgSszbUlfcjHSURzbj1CR/EwwsdL4DCf",
	"HsN3qUyxXKBektmbVEzX65HOwmofXIJpohG/6RnrHyKSS0irOTHfTK3XydTpf+LvnSlJB56sYYz1I7gy",
	"PaN5R63gH/QG5+1ycaAWW3ndlmG7G+MpYarEbXmTOD5fP826E3TG3rjeDORaaXfTrhrrdAB8NjzYOnta",
	"Kuba2K4SOabZyF9BKzQkSKZkDiMZKKLNxtgQnqM+b3yAk4OhzZFuo9AfXaA2syQgH9M9dXzUWCOtIPXH",
	"beOP0S7WTvA4oP+1FWWCCmrlvpsYjiWTitEbG3FLiuTrcsYIZh+n3SOkT3vM4zoRRdpO5iihoJo7XXml",
	"zkqRb7nsHg04XIxnTJOnPBfa5/3DY/6QRYNm4Py8VYOkmghqkb40orugYPZWa1H7tADXfF+BtHfkfG+p",
	"N8XLYGVqPX8D0BM3gND7UJ3vqRfH3djuY5s93F610HZK3DZa43Li3tNGBoTnFjrdlU6QUxHWDcZcRmGq",
	"wXbqr3StDf4K9kwH00Bcw7V7bvvEWxaJRStS2U3vRQXdvYQUuZQKJI4SiXS9TN9rKeCeWPYXM8vpHimf",
	"pQozQRXhcfI5mmixcALZXrR9+k9wjy1p+xr64QO9Mub9eFm845+xl20cM/paKKKvC24m+9PQI0PZwG1y",
	"ttDBTsV1sDmj0+by8kNN0RSJg+sbkC7j2oy1Gt+E5+tN+05LwnATmt2sQXftUsaT0HKtf+0aju02odn4",
	"iZ8e51k+xOvm6TPk0ZzhBInYuEX/4tjT5drD0FHLASPkbGlTH/GDTptIsJ1qIYzt2lTgoPvhBS/L9zeS",
	"ZkoEoHTvf6dcjlQt2OdytEzScVLvdQyGI39AYwcJz3OnZRVdrGgE5xeGDWtSUQTpuCpVT4ifyCQTrzC1",
	"5Mb1ZnLdaDMaa4IiZ1xvmops+h9/fQdWMFmJVRQ+jWxcTtRrTXTSGw0FU9onkIi1zw6aqodzZI1Aer3q",
	"jdqIvNPOuvDVCUpfuvsH1L5ag5JZ3jrEnahylzyr2CU5ki8XZ+w1BZtr4AXxTC0spKrV9daPma87wFr2",
	"gaKzFrtRLdIzd4p61QANUrYGfKQqUZ/yj1r/kNemmcDYFFcixaaPpM+AoRduJj9Si6ScS6nsHwhPJ9Y/",
	"HDzTF4V/1HVbCLEEGV6LJNUXh50wkyoNYiPnntZa8yAIzBBdSXHQ51I+yS1GvBlJiVYjvhsTRecHDUbP",
	"1PAiU7Lcp7hrnNA4YK/tXsy+r9WmOJouZMj4VUbVdI5bYmAzb6MVImHjrfntw67vDuUq712jcjBAj2sc",
	"6tuLi5p5Kp7yq/pDH9LMIkfjrGZGpV1Kt3DiTxqyID8Dx5IFVX1pujCrS/mc/Qpa+ftiO5Q7EJ152qf+",
	"+6zcs0SntkSTGXUbTnliCSxa/Ix2OFlG7/Lyww0faRkI0z30i7tVRDyI41cTJYhiHAdvla85dM/aYjTj",
	"zMZOvR57eflhzYtiUI0lDr0iJtNWE6Hd9rWYkFj4bqLs0Sw217PYnBm/l7qxCxe+mWe0wgWRkmR2Ycep",
	"RyocdTq0sqtWN576mMPf+u+PIo1w6b0vcYRZZ8hjpkomr/BO9rwtgOyBUy18Z8yzEO/rDr/rYEop14Gb",
	"BfdYcOAO3jF7TnKt4vWD1uA8yDwiiKfd/jDp9O8SorxgDuNFtR5wgC66YPha2v1ejAyjpzGIX4dpMDwu",
	"BNM9Hquhwhyu7oqZQI4vINeqhV1lPwqkwLiHODTcRDPEe83YazcyL3d8b4KptCOs6eHCrlLFmISZLk7y",
	"JPtuem90jo6xd5CLWuB7uH0u2NL4tIFx4j1iMlQ6pkPZZ+K6NVr42HDelWTsO7+C78sXl+ORgF76beZl",
	"31pAAwdjsGvzIowdVtSiNJJnhxMhUqU62y09wPO8d3KW2XlL4ak8jnoRk6NpprmbHD6aNOEWka6RQ9p3",
	"XF/1ZCA3/Qc3KQmiN2pPxYhSF+7wCJp3Jrzt3qnCUOzWtP8jaHJgvuOyUBV71Uiigkc/vnv1mGkwTWkD",
	"kYWyB474PCS/4/fR1uP30RKvhLkteaiX0a6Kz/QyWjl6Ge3uKz3+TbRAW1MvooWgf3IfbYSxOmEi/vR1",
	"wubYTHAFzvMZ77U4ldH4bsRp/Ex3U6RIj+rC/KNUe4fPUBlqICLvpY70nvPllu2cnDa+umenlvTDH7s6",
	"u7KNYows7gfDI/vjTTyA4jUSnATLAyZegTX+deHAhaMn7un9KqoPXEZqwrqRhRlsYfcmx4yvcFZL8EpC",
	"aDPrdpwSn8fKzIvYqdiHBJ12PmmifcV4+OwO1myl6qz4kjQ9YjwsuNRtZa3VtShSr2GUaiNyQ7aKU72b",
	"b0Lf2+Wiakor7jjOd6EvuVvTElOgQ/HCcllwXTAonv75z1990y33d8auxpuUDEXxy/LmOG5F3tf42tUd",
	"wcQCKs82asyyJr1SetMZ6Vsv1BKrTHeRXqc5kxCQ9HqjxYZghtWe8YjUlVNwSyu6n5buty032451RpXC",
	"sYI7Z55fDSPUMD/m8zy7FB2K7F5BBIPjMcU4ukPyezgbg1fJRH40S/wu4iTjQtp+iWSgdPQSkgZxr+sS",
	"nG7X8cDxucn1vrbqPKCGRH6Y80KMHxeJx0vvOjbAyqDKaSJUSsApk53GhVfpDqo7RLKO9ucihitVsHCr",
	"wTiI0pEnW315+VNa2ZzKr3faZbrT7Ym4vRjsaX/Had8mNdz6ioD4tGf5AA18epDGe36Lwc1r1MZyJS3P",
	"UW+kUtWL5960tPCVkRdba2vz7Px8t9udBbvTWa6q8w0maGRWNfn2PAxE7yPFKdO+i68p6LhwubciN+z5",
	"29eoMwlbAsZ6F3CD9q2WshZPz55Qpj1IXovFs8XXZ0/OvqId2yIRnFNVC6rLi+twJIKK0esCM2qvIK6L",
	"gZXIsfIFdn/65EnYBn9riNw6578You/jPE3xNLjJ/Y14hH6Ix9FLCGMS+UFeSbWT7FutFZ0X01QV13tM",
	"6LSNloY9ffKEibWv5oEeOMud1P6woGTCxU+u3/n10/Movmbwy/lvwbUtitsDn88HZVdD28gJm/71/Le+",
	"i+z2yGbnPiQ3tA3O0N7f578FG9TtzKdzn1U+131ifVTO6vw3inSkm1o0VbpTT9H6zd546ND0ox1ZL559",
	"+G1wruCGV3UJeKQWtz+16GxPpEfr7bL9pVTqqqnjXwxwnW8Xtz/d/k8AAAD//2XOqPmqtAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
