// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XEK5AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
