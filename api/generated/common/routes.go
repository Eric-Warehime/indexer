// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gAG0AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
