// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/apps-local-state)
	LookupAccountAppLocalStates(ctx echo.Context, accountId string, params LookupAccountAppLocalStatesParams) error

	// (GET /v2/accounts/{account-id}/assets)
	LookupAccountAssets(ctx echo.Context, accountId string, params LookupAccountAssetsParams) error

	// (GET /v2/accounts/{account-id}/created-applications)
	LookupAccountCreatedApplications(ctx echo.Context, accountId string, params LookupAccountCreatedApplicationsParams) error

	// (GET /v2/accounts/{account-id}/created-assets)
	LookupAccountCreatedAssets(ctx echo.Context, accountId string, params LookupAccountCreatedAssetsParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"exclude":               true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
		"exclude":     true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountAppLocalStates converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAppLocalStates(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAppLocalStatesParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAppLocalStates(ctx, accountId, params)
	return err
}

// LookupAccountAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAssets(ctx, accountId, params)
	return err
}

// LookupAccountCreatedApplications converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedApplications(ctx, accountId, params)
	return err
}

// LookupAccountCreatedAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedAssets(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"creator":        true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"limit":          true,
		"next":           true,
		"txid":           true,
		"min-round":      true,
		"max-round":      true,
		"sender-address": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------
	if paramValue := ctx.QueryParam("sender-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/apps-local-state", wrapper.LookupAccountAppLocalStates, m...)
	router.GET("/v2/accounts/:account-id/assets", wrapper.LookupAccountAssets, m...)
	router.GET("/v2/accounts/:account-id/created-applications", wrapper.LookupAccountCreatedApplications, m...)
	router.GET("/v2/accounts/:account-id/created-assets", wrapper.LookupAccountCreatedAssets, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
